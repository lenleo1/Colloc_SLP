function [] = check_problem(problem_in)
% This function checks the problem struct to make sure it is correctly prepared

% Version 1.0
% usage: check_problem(problem_in)
% input: problem_in    - the problem to be solved
% Written by:    Zhidong Lu
% e-mail:        zhidong.lu@tum.de
%
% Created:       01/09/23
% Last modified: 10/04/24
%--------------------------------------------------------------------------
% Copyright (c) 2024, Zhidong Lu. All rights reserved.
%
%--Modifications
%
% Define the required fields and their explanation messages
    requiredFields = {...
        "type", "Problem type (e.g., 0-min time, 1-min lagrange term integration, others TBD).", ...
        "sys", "System dynamics function handle.", ...
        "nGrid", "Number of grid points for collocation.", ...
        "nState", "Number of state dimensions.", ...
        "nControl", "Number of control dimensions.", ...
        "nOutput", "Number of output (path constraint variable) dimensions.", ...
        "bounds", "Bounds on states, controls, and outputs.", ...
        "tau_vec", "Collocation grid vector.", ...
        "tf", "Final time for the trajectory.", ...
        "controls", "Control variables matrix.", ...
        "states", "State variables matrix.", ...
        "scale", "Scaling factors for numerical stability.", ...
        "solver", "Solver settings and parameters.", ...
        "solved", "Flag indicating if the problem has been solved.", ...
        "history", "(preallocated) History of solver iterations."};

    % Loop through each required field to check presence and non-emptiness
    for i = 1:2:length(requiredFields)
        fieldName = requiredFields{i};
        explanation = requiredFields{i+1};
        if ~isfield(problem_in, fieldName) || isempty(problem_in.(fieldName))
            error(['The required field "', fieldName, '" is missing or empty in the problem structure. ', explanation]);
        end
    end
end
